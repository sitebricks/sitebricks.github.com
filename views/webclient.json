{"id":"webclient","title":"Web Client","html":"<p></p>  \n<p>Sitebricks provides a really simple and effective API for writing HTTP clients in Java. Here is an example of fetching the Google home page:</p> \n<pre><code>Web web = Guice.createInjector().getInstance(Web.class);\n\nWebResponse response = web.clientOf(&quot;http://google.com&quot;)\n    .transports(String.class)\n    .over(Text.class)\n    .get();\n\nSystem.out.println(response.toString());\n</code></pre> \n<p>To add this library to your Maven project, add the following dependency:</p> \n<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.sitebricks&lt;/groupId&gt;\n  &lt;artifactId&gt;sitebricks-client&lt;/artifactId&gt;\n  &lt;version&gt;0.8.6-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> \n<h3>Fetching resources</h3> \n<p>Sitebricks Client supports the common set of HTTP methods. To send a post, use the following code:</p> \n<pre><code>WebResponse response = web.clientOf(&quot;http://google.com&quot;)\n    .transports(String.class)\n    .over(Text.class)\n    .post(&quot;q=sitebricks&quot;);\n</code></pre> \n<p>Here I've posted a string containing <code>q=sitebricks</code> to the Google search page. Using the various transports you can post other kinds of data (like JSON or XML) marshalled from simple Java objects. Reading the response back is similarly trivial:</p> \n<pre><code> String url = &quot;http://api.twitter.com/version/statuses/public_timeline.json&quot;;\n WebResponse response = web.clientOf(url)\n     .transports(String.class)\n     .over(Text.class)\n     .get();\n\n Tweets tweets = response.to(Tweets.class).using(Json.class);\n //...\n</code></pre> \n<p>In this example, I fetch the Twitter public timeline in JSON format. An existing Java class named <code>Tweets</code> is populated with the data from Twitter's JSON feed. The class <code>Json</code> is a Sitebricks <code>Transport</code> and is bundled with the library. Sitebricks also bundles XML and Raw (byte-buffer) transports.</p> \n<ul> \n <li>Json.class - Backed by Jackson JSON library</li> \n <li>Xml.class - Backed by XStream XML parsing library</li> \n <li>Text.class - Simple <code>toString()</code></li> \n <li>Raw.class - Uses a byte-buffer to send data such as binary files</li> \n</ul> \n<h3>Advanced</h3> \n<p>Sitebricks Client is powered by AHC web client and Netty and is designed to be fast and performant, in addition to being simple and type-safe.</p>","postedOn":"14 d√©c. 2011"}