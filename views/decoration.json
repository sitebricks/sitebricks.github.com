{"id":"decoration","title":"Decoration","html":"<p></p>  \n<p>Decorators can be use to achieve a standard page layout.</p> \n<p><em>Note : be aware that decoration is currently only supported by MVEL templates</em></p> \n<h3>A simple example</h3> \n<p>Create a template (Template.html)</p> \n<pre><code>&lt;html&gt; \n    &lt;body&gt; \n\n        Hello\n\n        @Decorated\n        &lt;div/&gt;\n\n        Sitebricks is ${decoratorPageProperty} ${subclassPageProperty}\n\n    &lt;/body&gt; \n&lt;/html&gt;\n</code></pre> \n<p>Create a new page (Extension.html)</p> \n<pre><code>&lt;html&gt; \n    &lt;body&gt; \n        World! \n\n        This is ${anotherDecoratorPageProperty} ${anotherSubclassPageProperty}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> \n<p>Declare the binding class for the template. Note that the At annotation should not be placed on the decorator.</p> \n<pre><code>@Show (&quot;Template.html&quot;)\nabstract class Decorator {\n\n    public abstract String getSubclassPageProperty();\n\n    public String getDecoratorPageProperty() {\n        return &quot;really&quot;;\n    }\n\n    public String getAnotherDecoratorPageProperty() {\n        return &quot;quite&quot;;\n    }\n}\n</code></pre> \n<p>Declare the binding class for the page</p> \n<pre><code>@At(&quot;/example&quot;)\n@Decorated \nclass Extension extends Decorator {\n\n    @Override\n    public String getSubclassPageProperty() {\n        return &quot;cool&quot;;\n    }\n    public String getAnotherSubclassPageProperty() {\n        return &quot;funky&quot;;\n    }\n}\n</code></pre> \n<p>In the browser, the output html source will be :</p> \n<pre><code>&lt;html&gt; \n\n    &lt;body&gt; \n\n        Hello \n\n        World!\n\n        This is quite funky\n\n        Sitebricks is really cool\n\n    &lt;/body&gt;\n</code></pre> \n<p></p> \n<ul> \n <li>You must use the @Decorated tag on on both the subclass and in the html decorator file.</li> \n <li>The decorator page class must have a @Show annotation - leave the value blank if the file name is the same as the class name</li> \n <li>Just like embedded bricks, you can only extend a decorator with pages - not headless services that e.g. output JSON or write their output directly to Respond (would like to fix this)</li> \n <li>Normal pages continue to work as they previously did</li> \n</ul> \n<h3>How to render ressources includes ?</h3> \n<p>In the Extension.html page, you may want to declare some specific CSS or JavaScript files. Use the @Require annotation to be sure it will be included.</p> \n<pre><code>&lt;html&gt; \n\n    &lt;head&gt;\n        @Require\n        &lt;script type=&quot;text/javascript&quot; src=&quot;myscript.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt; \n        World! \n\n        This is ${anotherDecoratorPageProperty} ${anotherSubclassPageProperty}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> \n<p>The script.js ressource will be included.</p>","postedOn":"15 d√©c. 2011"}