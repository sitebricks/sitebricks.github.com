{"id":"localization","title":"Localization","html":"<p></p>  \n<p>Sitebricks provides i18n using an interface declaring a method (annotated with @Message) for each message to use.</p> \n<pre><code>public interface UIMessages {\n\n    @Message(&quot;Hello&quot;)\n    String hello();\n\n    @Message(&quot;Good Bye ${name}&quot;)\n    String bye(@Named(&quot;name&quot;) String name);\n\n}\n</code></pre> \n<p>Note the use of ${name} to parameterize your messages.</p> \n<p>The interface is to be declared in the Sitebricks Module using :</p> \n<pre><code>// binds to text in @Message and Locale.getDefault()\nlocalize(UIMessages.class).usingDefault();\n</code></pre> \n<p>Then you can simply @Inject UIMessages anywhere and start using it (directly in your template if you like).</p> \n<pre><code>@At(&quot;/hello&quot;)\n@Service\npublic class HelloPage {\n\n    @Inject\n    UIMessages messages;\n\n    public Reply&lt;String&gt; get() {\n        return messages.hello();\n    }\n\n}\n</code></pre> \n<p>To declare more supported languages :</p> \n<pre><code>localize(UIMessages.class).using(Locale.CANADA_FRENCH, ResourceBundle.getBundle(...));\nlocalize(UIMessages.class).using(Locale.SPANISH, ResourceBundle.getBundle(...));\n</code></pre> \n<p>And Sitebricks detects the preferred locale from the browser header &quot;Accept-Language&quot; and returns the appropriate instance of the UIMessages.</p> \n<p>The resource bundles are just Maps and you can pass any kind of string/string map in so long as the key/value pairs correspond to : method<em>name=text (where method</em>name is the name of the interface method name, like hello() in UIMessages).</p>","postedOn":"15 d√©c. 2011"}