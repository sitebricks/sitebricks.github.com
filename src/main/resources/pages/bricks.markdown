<meta noindex>

# Component Reuse

One of the mainstays of good programming principles is the ability to reuse code. In traditional MVC frameworks, this has taken the form of defining a special "custom tag" or component that services general functionality and can be used to render a fragment of a page over and over again.

A typical example is an suggest box (an auto-completing textfield) like the one found on google.com. This custom bit of functionality is specific to the application is consideration and generally consists of the HTML and javascript required to make it work, as well as the backend logic to tie the whole thing together.

In Sitebricks, this is no different from creating any other page

### Bricks

A Sitebricks "brick" is characterized by a Java-like annotation placed on an HTML tag. For example, the @ShowIf brick determines if the annotated tag is rendered or not:

    @ShowIf(isAutobot)
    <span> Transform and roll out!</span>

This is not rendered if the page property isAutobot is false. Some bricks come out of the box, but it is very easy to create your own. Let's say you have a page that lists cartoon characters and some of their details:

    List of Transformers:
    <ul>
        <li>Hot Rod (Autobot)</li>
        <li>Soundwave (Decepticon)</li>
        <li>Quintesson (Other)</li>
    </ul>

This simple static page can be made dynamic by fetching data from a datastore as follows:

    List of Transformers:
    <ul>
        @Repeat(items=transformers, var="bot")
        <li>${bot.name} (${bot.affiliation})</li>
    </ul>

And the corresponding page class:

    @At("/cartoon/transformers")
    public class TransformersPage {
	
        private List<Transformer> transformers;

		public List<Transformer> getTransformers() {
		    return this.transformers;
		}
		
        ...
    }

Easy enough, with the repeat brick. However, this means I have to duplicate such functionality for every single use of a list that displays cartoon characters and their affiliation. This can be generalized for reuse to save you much error prone copy/pasting and to enable making changes easier from one location.

### Embedding Pages

First create an HTML template that has only the content you need to embed:

    <html>
        <body>
            
			${title}:
            <ul>
			    @Repeat(items=characters, var="character")
                <li>${character.name} (${character.affiliation})</li>
            </ul>
        </body>
    </html>
	
The corresponding page class looks like this:

    @EmbedAs("CharacterList")
    public class CharacterList {
	
        private String title;
        private List<CartoonCharacter> characters;

        // getter + setters.
    }

Notice that the @At is missing and replaced by an annotation telling Sitebricks the name of this brick. Now every setter that you expose becomes an argument to the embedding brick annotation. So in the original transformers detail page:

    <body>
        
		The Transformers cartoon ran from 1978 to 1985 blah blah...

        @CharacterList(characters=transformers, title="List of Transformers")
        <ul/>
	
	</body>
 
Now, sitebricks knows to bind the data list of transformers from the embedding page to the characters property in the brick, CharacterList (provided that Transformer is a subtype of CartoonCharacter). At runtime, it replaces the empty <ul/> tag with the dynamic content generated by the CharacterList brick.

Similarly, you can just as easily reuse this brick in your other pages that display lists of cartoon characters:

    <body>
        
		Chaotic first began as a Danish card game, which was then made into a 56-episode season on the ...

        @CharacterList(characters=overworlders, title="Denizens of Maxxor's Overworld")
        <ul/>

        @CharacterList(characters=underworlders, title="Minions of Kayor")
        <ul/>

	</body>

This is all statically verified at template compile time and you are not allowed to pass in any collection whose objects do not expose both properties name and affiliation required to render the composite page.

### Additional Resources

In the embedded page, you may want to declare some specific CSS or JavaScript files. Use the @Require annotation to be sure it will be included.

    <html> 
		
        <head>
			@Require
		    <script type="text/javascript" src="myscript.js"></script>
		</head>
	
        <body> 
            ...
        </body>
    </html> 

The script.js ressource will be included.

### Bricks directory

These bricks are included in Sitebricks distribution package.

  * @ShowIf : Hides or shows annotated tag content
    * Not self rendering
	* Usage @ShowIf(1+1 == 2)
  * @Repeat : Repeats annotated tag content over provided collection
    * Not self rendering
	* Usage @Repeat(items=movies, var="movie")
  * @TextField : A simple textbox with a property binding
    * Self rendering
	* Usage @TextField(myName)
  * @Require : Indicates the annotated tag must be rendered in <head> of target page
    * Not self rendering
	* Usage @Require
  * @Include : Includes any 'called-with' bricks in the embedded brick
    * Not self rendering
	* Usage @Include
	

